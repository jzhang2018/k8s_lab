---

## ---------------------- Master and Worker Nodes ---------------------- ##
- name: System verification for k8s set-up on all nodes
  hosts: master, workers
  gather_facts: false
  become: true
  tasks:
    # --------------- Verify if swap is disabled --------------- #
    - name: Verify swap usage
      ansible.builtin.command: swapon --noheadings --summary
      register: swap_status
      failed_when: false
      changed_when: false

    - name: Assert - swap is disabled
      ansible.builtin.assert:
        that:
          - "swap_status.stdout == ''"
        fail_msg: "Swap is NOT DISABLED"
        success_msg: "Assertion PASSED - Swap is DISABLED"

    # --------------- Verify if SELinux is set to permissive --------------- #
    - name: Verify SELinux is set to permissive mode
      ansible.builtin.command: getenforce
      register: selinux_mode
      changed_when: false

    - name: Assert - SELinux mode is set to Permissive mode
      ansible.builtin.assert:
        that:
          - "selinux_mode.stdout == 'Permissive'"
        fail_msg: "Assertion Failed - SELinux is NOT set to Permissive"
        success_msg: "Assertion Passed - SELinux is set to Permissive"

    # --------------- Verify if firewall ports are enabled --------------- #
    - name: Get firewalld active ports
      ansible.builtin.command: firewall-cmd --list-ports
      register: fw_ports
      changed_when: false

    - name: Assert required ports are open on all nodes
      ansible.builtin.assert:
        that:
          - "'10250/tcp' in fw_ports.stdout"
          - "'30000-32767/tcp' in fw_ports.stdout"
        fail_msg: "Assertion Failed - One or more required Kubernetes ports are not open in firewalld"
        success_msg: "Assertion Passed - All required Kubernetes ports are open"

    # --------------- Verify if kernel modules are loaded --------------- #
    - name: Get list of loaded kernel modules
      ansible.builtin.command: lsmod
      register: lsmod_output
      changed_when: false

    - name: Assert required kernel modules are loaded
      ansible.builtin.assert:
        that:
          - "'br_netfilter' in lsmod_output.stdout"
          - "'overlay' in lsmod_output.stdout"
          - "'ip_vs' in lsmod_output.stdout"
          - "'ip_vs_rr' in lsmod_output.stdout"
          - "'ip_vs_wrr' in lsmod_output.stdout"
          - "'ip_vs_sh' in lsmod_output.stdout"
        fail_msg: "Assertion Failed - One or more required kernel modules are not loaded"
        success_msg: "Assertion Passed - All required kernel modules are loaded"

    # --------------- Verify if kernel parameters are set for ip bridge and forwarding --------------- #
    - name: Get net.bridge.bridge-nf-call-iptables
      ansible.builtin.command: sysctl -n net.bridge.bridge-nf-call-iptables
      register: iptables_value
      changed_when: false

    - name: Assert net.bridge.bridge-nf-call-iptables is 1
      ansible.builtin.assert:
        that:
          - iptables_value.stdout | int == 1
        fail_msg: "Assertion Failed - net.bridge.bridge-nf-call-iptables is NOT set to 1"
        success_msg: "Assertion Passed - net.bridge.bridge-nf-call-iptables is set to 1"

    - name: Get net.bridge.bridge-nf-call-ip6tables
      ansible.builtin.command: sysctl -n net.bridge.bridge-nf-call-ip6tables
      register: ip6tables_value
      changed_when: false

    - name: Assert net.bridge.bridge-nf-call-ip6tables is 1
      ansible.builtin.assert:
        that:
          - ip6tables_value.stdout | int == 1
        fail_msg: "Assertion Failed - net.bridge.bridge-nf-call-ip6tables is NOT set to 1"
        success_msg: "Assertion Passed - net.bridge.bridge-nf-call-ip6tables is set to 1"

    - name: Get net.ipv4.ip_forward
      ansible.builtin.command: sysctl -n net.ipv4.ip_forward
      register: ip_forward_value
      changed_when: false

    - name: Assert net.ipv4.ip_forward is 1
      ansible.builtin.assert:
        that:
          - ip_forward_value.stdout | int == 1
        fail_msg: "Assertion Failed - net.ipv4.ip_forward is NOT set to 1"
        success_msg: "Assertion Passed - net.ipv4.ip_forward is set to 1"

    # --------------- Verify if CRI-O is installed --------------- #
    - name: Check for CRIO binary
      ansible.builtin.command: which crio
      register: crio_check
      ignore_errors: true
      changed_when: false

    - name: Assert CRI-O is installed
      ansible.builtin.assert:
        that:
          - crio_check.rc == 0
        fail_msg: "Assertion Failed - CRI-O is NOT installed"
        success_msg: "Assertion Passed - CRI-O is installed"

  # ---------------- Verify if kubelet, kubeadm and kubectl are installed --------------- #
    - name: Check if kubelet is installed
      ansible.builtin.command: which kubelet
      register: kubelet_check
      ignore_errors: true
      changed_when: false

    - name: Check if kubeadm is installed
      ansible.builtin.command: which kubeadm
      register: kubeadm_check
      ignore_errors: true
      changed_when: false

    - name: Check if kubectl is installed
      ansible.builtin.command: which kubectl
      register: kubectl_check
      ignore_errors: true
      changed_when: false

    - name: Assert kubelet is installed
      ansible.builtin.assert:
        that:
          - kubelet_check.rc == 0
        fail_msg: "Assertion Failed - kubelet is NOT installed"
        success_msg: "Assertion Passed - kubelet is installed"

    - name: Assert kubeadm is installed
      ansible.builtin.assert:
        that:
          - kubeadm_check.rc == 0
        fail_msg: "Assertion Failed - kubeadm is NOT installed"
        success_msg: "kubeadm is installed"

    - name: Assert kubectl is installed
      ansible.builtin.assert:
        that:
          - kubectl_check.rc == 0
        fail_msg: "Assertion Failed - kubectl is NOT installed"
        success_msg: "Assertion Passed - kubectl is installed"

## ---------------------- Master Node ---------------------- ##
- name: System verification for k8s set-up on Master nodes
  hosts: master
  gather_facts: false
  become: true
  tasks:
    # --------------- Verify if firewall ports are enabled --------------- #
    - name: Get firewalld active ports
      ansible.builtin.command: firewall-cmd --list-ports
      register: master_fw_ports
      changed_when: false

    - name: Assert required ports are open on all nodes
      ansible.builtin.assert:
        that:
          - "'6443/tcp' in master_fw_ports.stdout"
          - "'2379-2380/tcp' in master_fw_ports.stdout"
        fail_msg: "Assertion Failed - One or more required Kubernetes ports are not open in firewalld on master node"
        success_msg: "Assertion Passed - All required Kubernetes ports are open on master node"
